---
import { Image } from 'astro:assets';
import { isExternalImage } from '../utils/imageHelpers';

interface Props {
  article: {
    data: {
      thumbnail: string;
      title: string;
      categories: string[];
      description: string;
      date: Date;
      readTime: number;
    };
    slug: string;
  };
  lang: 'en' | 'fr' | 'it';
  url?: string;
  lazyLoad?: boolean;
  uiTranslations: any;
}

const { article, lang, url, lazyLoad = false, uiTranslations } = Astro.props;

const isExternal = isExternalImage(article.data.thumbnail);
const imageUrl = isExternal ? new URL(article.data.thumbnail, Astro.site) : article.data.thumbnail;

const imageProps = {
  src: isExternal ? (imageUrl as URL).href : imageUrl as string,
  alt: article.data.title,
  width: 800,
  height: 500,
  class: "w-full h-64 object-cover",
};

function formatDate(date: Date, lang: string): string {
  return new Intl.DateTimeFormat(lang, {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
}

const articleUrl = url || `/${lang}/blog/${article.slug.split('/').pop()}`;
---

<article class="hover:bg-travailleur bg-light-blue bg-opacity-50 overflow-hidden transition-all duration-300 hover:shadow-md w-full max-w-sm mx-auto group">
  <a href={articleUrl} class="block">
    <div class="relative">
      <Image
        src={imageProps.src}
        alt={imageProps.alt}
        width={imageProps.width}
        height={imageProps.height}
        class={imageProps.class}
        loading={lazyLoad ? "lazy" : "eager"}
        decoding="async"
      />
      {article.data.categories.length > 0 && (
        <div class="absolute top-2 left-2">
          <span class="text-xs px-3 py-1 text-black bg-accent">
            {article.data.categories[0]}
          </span>
        </div>
      )}
    </div>
    <div class="p-5">
      <h3 class="text-xl font-light mb-3 text-black line-clamp-3 min-h-[4.5rem] transition-colors duration-300 group-hover:text-white">{article.data.title}</h3>
      <div class="flex justify-between items-center text-xs text-gray-600  group-hover:text-white">
        <time datetime={article.data.date.toISOString()}>{formatDate(article.data.date, lang)}</time>
        <span class="text-black font-medium text-sm underline hover:no-underline inline-flex items-center group-hover:text-white transition-colors duration-300">
          {uiTranslations.readMore}
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </span>
      </div>
    </div>
  </a>
</article>