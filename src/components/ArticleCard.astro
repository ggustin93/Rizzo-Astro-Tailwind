---
import { Image } from 'astro:assets';
import { isExternalImage } from '../utils/imageHelpers';

interface Props {
  article: any;
  lang: string;
  url: string;
  lazyLoad?: boolean;
}

const { article, lang, url, lazyLoad = false } = Astro.props;

const isExternal = isExternalImage(article.data.thumbnail);
const imageUrl = isExternal ? new URL(article.data.thumbnail, Astro.site) : article.data.thumbnail;

const imageProps = {
  src: isExternal ? imageUrl.href : imageUrl,
  alt: article.data.title,
  width: 800,
  height: 500,
  class: "w-full h-72 object-cover rounded-t-lg",
};

const readMoreTranslations = {
  en: "Read more",
  fr: "Lire la suite",
  it: "Leggi di pi√π"
};

const readMoreText = readMoreTranslations[lang] || readMoreTranslations.en;

function formatDate(date: Date, lang: string): string {
  return new Intl.DateTimeFormat(lang, { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  }).format(date);
}
---

<article class="bg-white rounded-lg overflow-hidden shadow-sm transition-shadow duration-300 hover:shadow-md max-w-sm">
  <a href={url} class="block">
    <div class="relative">
      <Image 
        {...imageProps}
        loading={lazyLoad ? "lazy" : "eager"}
        decoding="async"
      />
      {article.data.categories.length > 0 && (
        <div class="absolute top-2 left-2">
          <span class="text-xs font-semibold px-3 py-1 rounded-full text-black bg-accent">
            {article.data.categories[0]}
          </span>
        </div>
      )}
    </div>
    <div class="p-4">
      <h3 class="text-xl font-semibold mb-2 text-dark-gray line-clamp-2">{article.data.title}</h3>
      <p class="text-dark-gray mb-4 font-light leading-relaxed text-sm line-clamp-3">{article.data.description}</p>
      <div class="flex justify-between items-center text-xs text-dark-gray">
        <time datetime={article.data.date.toISOString()}>{formatDate(article.data.date, lang)}</time>
        <span>{article.data.readTime} min read</span>
      </div>
    </div>
  </a>
</article>