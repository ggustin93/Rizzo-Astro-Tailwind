---
// Import des props
const { currentLang } = Astro.props;
const langs = ['fr', 'en', 'it'];
---

<style>
  /* Masquer le menu déroulant sur mobile */
  @media (max-width: 768px) {
    #language-select {
      display: none;
    }
    .mobile-lang-links {
      display: block;
    }
  }

  /* Masquer les liens sur les écrans plus grands */
  @media (min-width: 769px) {
    .mobile-lang-links {
      display: none;
    }
  }

  /* Souligner la langue actuelle sur mobile */
  .mobile-lang-links a.current-lang {
    text-decoration: underline;
    text-decoration-color: black;
  }
</style>

<div class="relative inline-block group">
  <select 
    id="language-select"
    class="appearance-none text-black text-sm font-light bg-transparent border border-black rounded-full px-3 py-1 pr-8 uppercase hover:bg-black hover:text-white transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-black focus:ring-opacity-50"
  >
    {langs.map((lang) => (
      <option value={lang} selected={lang === currentLang}>
        {lang.toUpperCase()}
      </option>
    ))}
  </select>
  <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-black group-hover:text-white transition-colors duration-300">
    <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
      <path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" fill-rule="evenodd"></path>
    </svg>
  </div>
</div>

<div class="mobile-lang-links flex space-x-4">
  {langs.map((lang) => (
    <a 
      href="#"
      data-lang={lang}
      class={`text-sm font-light uppercase ${lang === currentLang ? 'text-black current-lang' : 'text-gray-500'} hover:text-black transition-colors duration-300`}
    >
      {lang.toUpperCase()}
    </a>
  ))}
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const select = document.getElementById('language-select');
    const langLinks = document.querySelectorAll('.mobile-lang-links a');

    const handleLanguageChange = (newLang) => {
      const currentPath = window.location.pathname;
      const newPath = currentPath.replace(/^\/[^\/]+/, `/${newLang}`);

      // Debugging
      console.log(`Language selected: ${newLang}`);
      console.log(`Redirecting to: ${newPath}`);

      // Fermer le menu mobile
      const mobileMenu = document.getElementById('mobile-menu');
      if (mobileMenu) {
        mobileMenu.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
      }

      window.location.href = newPath;
    };

    if (select) {
      console.log('Language select element found');  // Debugging
      select.addEventListener('change', (event) => {
        const target = event.target as HTMLSelectElement;
        handleLanguageChange(target.value);
      });
    } else {
      console.log('Language select element not found');  // Debugging
    }

    langLinks.forEach(link => {
      link.addEventListener('click', (event) => {
        event.preventDefault();
        const target = event.target as HTMLAnchorElement;
        handleLanguageChange(target.dataset.lang);
      });
    });
  });
</script>