---
// src/pages/blog/[lang]/[slug].astro
import { getEntry } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import CTA from '../../components/CTA.astro';
import { CheckCircle } from 'astro-feather-icons';
import { getArticles } from '../../utils/articles';
import ArticleCard from '../../components/ArticleCard.astro';
import { Picture, Image } from 'astro:assets';
import SEO from '../../components/SEO.astro';

// Import des images locales
import heroImage from '../../assets/images/hero_image_wbg.svg';
import profileImage from '../../assets/images/chrizzo-pp.avif';
import illustrationServices from '../../assets/images/illustration_services.svg';

const supportedLanguages = ['fr', 'en', 'it'] as const;
type SupportedLanguage = typeof supportedLanguages[number];

export interface Props {
  currentLang: SupportedLanguage;
}

export async function getStaticPaths() {
  return ['fr', 'en', 'it'].map(lang => ({ params: { lang } }));
}

const { currentLang } = Astro.props as Props;
import { getUiTranslations } from '../../utils/ui-translations';
const uiTranslations = getUiTranslations(currentLang);

const { lang } = Astro.params;
const homeEntry = await getEntry('home', 'home');
const content = homeEntry.data[lang as keyof typeof homeEntry.data] || homeEntry.data['fr'];

if (!content || !content.expertise || !content.expertise.travailleurs) {
  console.error('Structure de contenu invalide:', content);
}

// Récupération des articles
const recentArticles = await getArticles(lang, 3);

// Ajout des métadonnées SEO
const { title, description, keywords, image } = content.seo;

// Fonction pour générer des IDs uniques
function generateUniqueId(prefix: string) {
  return `${prefix}-${Math.random().toString(36).substr(2, 9)}`;
}
---

<BaseLayout title={title} description={description} keywords={keywords} image={image} lang={currentLang}>  
  <div class="full-bleed bg-white bg-svg-pattern">
    <section class="py-6 md:py-10">
      <div class="container mx-auto px-4 flex flex-col items-center md:flex-row md:items-center md:justify-between">
        <div class="w-full md:w-1/2 text-center md:text-left">
          <h1 class="text-5xl md:text-6xl lg:text-7xl font-light mb-2 md:mb-3 text-gray-800">{content.hero.title}</h1>
          <h2 class="text-3xl md:text-4xl lg:text-5xl mb-3 md:mb-4 text-accent font-light">{content.hero.subtitle}</h2>
          <p class="mb-5 md:mb-6 text-sm md:text-base text-dark-gray max-w-xl mx-auto md:mx-0 font-light leading-relaxed">{content.hero.description}</p>
          <button 
            class="w-auto min-w-[200px] max-w-[80%] mx-auto md:mx-0 bg-transparent text-black border border-dark-gray px-4 py-2 md:px-6 md:py-3 rounded-sm hover:bg-gray-700 hover:text-white transition duration-300 uppercase text-sm md:text-base font-light mb-3 md:mb-0" 
            aria-label="Call to action"
            data-cal-link="c.rizzo-avocat.be/premier-contact"
            data-cal-config='{"layout":"month_view"}'
          >
            {content.hero.cta}
          </button>
        </div>
        <div class="w-full md:w-1/2 flex justify-center md:justify-end mt-1 md:mt-0">
          <Picture 
            src={heroImage} 
            formats={['avif', 'webp']} 
            alt="Christine Rizzo" 
            class="w-full h-auto max-w-sm md:max-w-xl object-contain" 
            decoding="async" 
            loading="eager" 
            width="950" 
            height="750"
          />
        </div>
      </div>
    </section>
  </div>

  <div class="full-bleed bg-beige">
    <section id="services" class="py-10 md:py-14">
      <div class="container px-4">
        <div class="flex items-center mb-6 justify-center">
          <div class="flex-grow h-px bg-gray-300 max-w-xs"></div>
          <h2 class="text-2xl font-light text-gray-600 mx-10 uppercase text-center">{content.expertise.title}</h2>
          <div class="flex-grow h-px bg-gray-300 max-w-xs"></div>
        </div>
        
        <p class="text-center mb-8 max-w-3xl mx-auto text-dark-gray font-light">
          {content.expertise.description}
        </p> 
        
        <div class="flex flex-col md:flex-row gap-8 mb-0">
          <div class="md:w-1/2 bg-travailleur p-6 rounded-sm text-white flex flex-col justify-between">
            <div>
              <h3 class="text-xl font-semibold mb-4">{content.expertise.travailleurs.title}</h3>
              <p class="font-light mb-4">{content.expertise.travailleurs.description}</p>
            </div>
            <a href={`/${lang}/services/travailleurs`} class="self-end bg-white text-travailleur px-4 py-2 rounded-sm hover:bg-gray-800 hover:text-white transition duration-300 mt-4">
              {content.expertise.travailleurs.cta} →
            </a>
          </div>
          
          <div class="md:w-1/2 bg-employeur p-6 rounded-sm text-white flex flex-col justify-between">
            <div>
              <h3 class="text-xl font-semibold mb-4">{content.expertise.employeurs.title}</h3>
              <p class="font-light mb-4">{content.expertise.employeurs.description}</p>
            </div>
            <a href={`/${lang}/services/employeurs`} class="self-end bg-white text-employeur px-4 py-2 rounded-sm hover:bg-gray-800 hover:text-white transition duration-300 mt-4">
              {content.expertise.employeurs.cta} →
            </a>
          </div>
        </div>

        <Picture 
          src={illustrationServices} 
          formats={['avif', 'webp', 'svg']}
          alt="Illustration des services" 
          class="w-full max-w-3xl md:max-w-4xl mx-auto mb-8"
          widths={[400, 800, 1200]}
          sizes="(max-width: 768px) 95vw, (max-width: 1200px) 80vw, 1200px"
        />
        
        <p class="text-center mb-6 max-w-3xl mx-auto text-dark-gray font-light leading-relaxed">
          {content.expertise.honoraires.intro} - 
          <a href={`/${lang}/honoraires`} class="text-travailleur hover:underline">{content.expertise.honoraires.linkText}</a>.
        </p>
        
        <ul class="list-none space-y-2 flex flex-col items-start max-w-md mx-auto">
          {content.expertise.honoraires.advantages.map((advantage: string) => (
            <li class="text-dark-gray font-light flex items-center w-full">
              <CheckCircle class="text-travailleur mr-2 w-4 h-4 flex-shrink-0" />
              <span>{advantage}</span>
            </li>
          ))}
        </ul>
      </div>
    </section>
  </div>
  
  <div class="full-bleed bg-white">
    <section id="profil" class="py-16 md:py-24 bg-svg-pattern">
      <div class="container mx-auto px-4">
        <div class="flex items-center mb-8 md:mb-12 justify-center">
          <div class="flex-grow h-px bg-gray-300 max-w-xs"></div>
          <h2 class="text-2xl font-light text-gray-600 mx-10 uppercase text-center">{content.profil.title}</h2>
          <div class="flex-grow h-px bg-gray-300 max-w-xs"></div>
        </div>
        <div class="max-w-4xl mx-auto">
          <div class="flex flex-col md:flex-row items-start gap-6 md:gap-8">
            <div class="md:w-3/5 w-full">
              <Picture 
                src={profileImage} 
                formats={['avif', 'webp']} 
                alt="Christine Rizzo" 
                class="w-full h-auto object-cover rounded-sm" 
                decoding="async" 
                loading="lazy" 
                height="800"
                width="800" 
              />
            </div>
            <div class="md:w-2/5 w-full mt-4 md:mt-0 text-center md:text-left">
              <p class="text-dark-gray font-light leading-relaxed mb-6">{content.profil.description}</p>
              <div class="flex justify-center md:justify-start">
                <a 
                  href={`/${lang}/profil`} 
                  class="inline-block bg-transparent text-dark-gray border border-dark-gray px-4 md:px-6 py-2 md:py-3 rounded-sm hover:bg-gray-700 hover:text-white transition duration-300 uppercase text-sm font-light"
                >
                {content.profil.cta}
              </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </div>

  <CTA lang={currentLang} uiTranslations={uiTranslations} />

  <div class="full-bleed bg-white">
    <section id="articles" class="py-16 md:py-24">
      <div class="container mx-auto px-4">
        <div class="flex items-center mb-8 md:mb-12 justify-center">
          <div class="flex-grow h-px bg-gray-300 max-w-xs"></div>
          <h2 class="text-2xl font-light text-gray-600 mx-10 uppercase text-center">{content.articlesTitle}</h2>
          <div class="flex-grow h-px bg-gray-300 max-w-xs"></div>
        </div>
        <div class="max-w-6xl mx-auto">
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-8 justify-items-center">
            {recentArticles.map((article) => {
              const slug = article.slug.split('/').slice(1).join('/');
              return (
                <ArticleCard
                  article={article}
                  lang={currentLang}
                  url={`/${lang}/blog/${slug}`}
                  uiTranslations={uiTranslations}
                />
              );
            })}
          </div>
        </div>
        <div class="text-center mt-8 md:mt-12">
          <a href={`/${lang}/blog`} class="inline-block bg-transparent text-dark-gray border border-dark-gray px-4 md:px-6 py-2 md:py-3 rounded-sm hover:bg-gray-700 hover:text-white transition duration-300 uppercase text-sm font-light">
            {content.viewAllArticles}
          </a>
        </div>
      </div>
    </section>
  </div>
</BaseLayout>