---
import { getCollection } from 'astro:content';
import BaseLayout from '../../../layouts/BaseLayout.astro';

type Language = 'fr' | 'it' | 'en';

export async function getStaticPaths() {
  const languages: Language[] = ['fr', 'it', 'en'];
  const blogEntries = await getCollection('blog');

  return blogEntries.map(entry => {
    const [lang, ...slugParts] = entry.slug.split('/');
    return {
      params: { lang, slug: slugParts.join('/') },
      props: { entry, lang },
    };
  });
}

const { entry, lang } = Astro.props;
const { Content } = await entry.render();


function formatDate(date: Date): string {
  return date.toLocaleDateString(lang, {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

const translations = {
  fr: { backToArticles: "← Retour aux articles", keyPoints: "Points clés :" },
  en: { backToArticles: "← Back to articles", keyPoints: "Key points:" },
  it: { backToArticles: "← Torna agli articoli", keyPoints: "Punti chiave:" }
};

const t = translations[lang];
---

<BaseLayout title={entry.data.title} lang={lang}>
  <article class="max-w-4xl mx-auto px-4 py-12">
    <header class="relative mb-12">
      <img src={entry.data.thumbnail} alt={entry.data.title} class="w-full h-[50vh] object-cover rounded-lg" />
      <div class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center rounded-lg">
        <h1 class="text-4xl md:text-5xl font-light text-white text-center px-4">{entry.data.title}</h1>
      </div>
    </header>

    <div class="flex items-center justify-between text-dark-gray text-sm mb-8">
      <div class="flex items-center">
        <img src="https://via.placeholder.com/40" alt={entry.data.author} class="w-10 h-10 rounded-full mr-3" />
        <span>{entry.data.author}</span>
      </div>
      <div class="flex items-center space-x-4">
        <span>{formatDate(entry.data.date)}</span>
        <span>·</span>
        <span>{entry.data.readTime}</span>
      </div>
    </div>

    <div class="mb-8 flex flex-wrap gap-2">
      {entry.data.categories.map((category: string) => (
        <span class="bg-accent text-black px-3 py-1 rounded-full text-sm">{category}</span>
      ))}
    </div>

    {entry.data.highlights && (
      <div class="bg-light-accent p-6 rounded-lg mb-8">
        <h2 class="text-xl font-semibold mb-4 text-black">{t.keyPoints}</h2>
        <ul class="list-disc pl-5 space-y-2">
          {entry.data.highlights.map((highlight: string) => (
            <li>{highlight}</li>
          ))}
        </ul>
      </div>
    )}

    <div class="prose prose-lg max-w-none text-dark-gray">
      <Content />
    </div>

    <div class="flex justify-between items-center mt-12 pt-8 border-t border-light-gray">
      <a
        href={`/${lang}/blog`}
        class="inline-block bg-transparent text-black border border-black px-4 py-2 rounded-sm hover:bg-black hover:text-white transition duration-300 text-sm uppercase font-light"
      >
        {t.backToArticles}
      </a>
      <div class="flex space-x-4">
        <a href="#" class="text-dark-gray hover:text-accent">
          <i class="fab fa-twitter"></i>
        </a>
        <a href="#" class="text-dark-gray hover:text-accent">
          <i class="fab fa-linkedin"></i>
        </a>
        <a href="#" class="text-dark-gray hover:text-accent">
          <i class="fab fa-facebook"></i>
        </a>
      </div>
    </div>    
  </article>
</BaseLayout>