---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { Briefcase, Shield, FileText, Check, ArrowLeft } from 'astro-feather-icons2';
import { getEntry } from 'astro:content';

export async function getStaticPaths() {
  return ['fr', 'en', 'it'].map(lang => ({ params: { lang } }));
}

const { lang } = Astro.params;
const tarifTravailleur = await getEntry('honoraires', 'tarif_travailleur');
const content = tarifTravailleur.data[lang] || tarifTravailleur.data['fr']; // Utiliser le français par défaut

// Traductions
const translations = {
  fr: {
    backLinkText: "Retour aux honoraires",
    contactText: "Pour plus d'informations sur nos tarifs ou pour obtenir un devis personnalisé, n'hésitez pas à nous contacter.",
    contactButton: "Nous contacter",
    includedServicesTitle: "Services inclus :",
    includedServicesDefault: "Services inclus : sur demande, adaptés à votre situation spécifique."
  },
  en: {
    backLinkText: "Back to fees",
    contactText: "For more information on our rates or to get a personalized quote, please contact us.",
    contactButton: "Contact us",
    includedServicesTitle: "Included services:",
    includedServicesDefault: "Included services: on request, tailored to your specific situation."
  },
  it: {
    backLinkText: "Torna alle tariffe",
    contactText: "Per ulteriori informazioni sulle nostre tariffe o per ottenere un preventivo personalizzato, non esitate a contattarci.",
    contactButton: "Contattaci",
    includedServicesTitle: "Servizi inclusi:",
    includedServicesDefault: "Servizi inclusi: su richiesta, adattati alla vostra situazione specifica."
  }
};

const t = translations[lang as keyof typeof translations];

const iconMap = {
  Briefcase,
  Shield,
  FileText,
  Check
};
---

<BaseLayout 
  title={`Honoraires et Tarifs - Christine Rizzo`}
  description={`Informations sur les honoraires et tarifs de Christine Rizzo`}
  lang={lang}>
  <main class="container mx-auto px-4 py-12">
    <a href={`/${lang}/honoraires`} class="inline-flex items-center text-travailleur hover:underline mb-6">
      <ArrowLeft class="w-4 h-4 mr-2" />
      {t.backLinkText}
    </a>
    <h1 class="text-4xl font-light mb-12 text-center text-black">{content.title}</h1>
    
    {content.services && content.services.map((service) => (
      <div class="mb-12 rounded-lg overflow-hidden shadow-lg flex flex-col md:flex-row">
        <div class="md:w-1/2 p-6 bg-travailleur text-white">
          <div class="flex items-start mb-4">
            <iconMap[service.icon] class="w-8 h-8 mr-4 mt-1 flex-shrink-0" />
            <h2 class="text-2xl font-semibold">{Array.isArray(service.title) ? service.title.join(', ') : service.title}</h2>
          </div>
          {service.description && <p class="mb-4 opacity-90">{service.description}</p>}
          <p class="font-medium text-accent mb-4">{service.pricing}</p>
          {service.details && (
            <ul class="list-disc list-inside mb-4 opacity-90">
              {service.details.map((detail) => (
                <li>{detail}</li>
              ))}
            </ul>
          )}
        </div>
        <div class="md:w-1/2 p-6 bg-white">
          {service.services && service.services.length > 0 ? (
            <div>
              <h3 class="font-medium mb-4 text-black">{t.includedServicesTitle}</h3>
              <ul class="space-y-2">
                {service.services.map((item) => (
                  <li class="flex items-start">
                    <span class="text-travailleur mr-3 text-xl">•</span>
                    <span class="text-dark-gray">{item}</span>
                  </li>
                ))}
              </ul>
            </div>
          ) : (
            <p class="text-dark-gray">{t.includedServicesDefault}</p>
          )}
        </div>
      </div>
    ))}
    
    <p class="mt-12 text-center text-dark-gray">
      {t.contactText}
    </p>

    <div class="mt-8 text-center">
      <a href={`/${lang}/contact`} class="inline-block bg-transparent text-dark-gray border border-dark-gray px-4 md:px-6 py-2 md:py-3 rounded-sm hover:bg-gray-700 hover:text-white transition duration-300 uppercase text-sm font-light">
        {t.contactButton}
      </a>
    </div>
  </main>
</BaseLayout>

<style>
  .bg-travailleur {
    background-color: #068D9D;
  }
  .text-travailleur {
    color: #068D9D;
  }
</style>